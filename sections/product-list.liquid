{% liquid
  assign max_items = section.settings.max_products

  if section.settings.collection != blank and shop.products_count != 0
    assign section_products = section.settings.collection.products
    assign max_items = section_products.size | at_most: section.settings.max_products
  endif

  case section.settings.layout_type
    when 'grid'
      assign classes = 'resource-list--grid'
      capture styles
        echo '--resource-list-column-gap-desktop: ' | append: section.settings.columns_gap | append: 'px;'
        echo '--resource-list-row-gap-desktop: ' | append: section.settings.rows_gap | append: 'px;'
        echo '--resource-list-columns: repeat(' | append: section.settings.columns | append: ', 1fr);'
        echo '--resource-list-columns-mobile: repeat(' | append: section.settings.mobile_columns | append: ', 1fr);'
      endcapture
    when 'carousel'
      assign classes = 'resource-list__carousel'
      capture styles
        echo '--resource-list-column-gap-desktop: ' | append: section.settings.columns_gap | append: 'px;'
        echo '--column-count: ' | append: section.settings.columns | append: ';'
        echo '--column-count-mobile: ' | append: section.settings.mobile_columns | append: ';'
        echo '--mobile-card-size: ' | append: section.settings.mobile_card_size | append: ';'
      endcapture
  endcase
%}

<div class="section-background color-{{ section.settings.color_scheme }}"></div>
<div
  class="
    section
    section--{{ section.settings.section_width }}
    color-{{ section.settings.color_scheme }}
    section-resource-list
    spacing-style
    gap-style
  "
  style="
    --column-count-mobile: {{ section.settings.mobile_columns }};
    {% render 'spacing-style', settings: section.settings %}
    {% render 'gap-style', value: section.settings.gap %}
    {{ styles }}
  "
>
  <div class="section-resource-list__header">
    {%- content_for 'block', type: '_product-list-content', id: 'static-header' -%}
  </div>

  {% capture list_items %}
    {% for i in (1..max_items) %}
      {% if section_products.size > 0 %}
        {% assign index = forloop.index0 %}
        {% assign product = section_products[index] %}
      {% else %}
        {% assign product = null %} 
      {% endif %}
      <div
        class="resource-list__item"
      >
        {% content_for 'block', type: '_product-card', id: 'static-product-card', closest.product: product %}
        
        {% comment %} Quick View Button {% endcomment %}
        {% if product %}
          <button 
            class="product-quick-view-btn" 
            data-product-id="{{ product.id }}"
            data-product-handle="{{ product.handle }}"
            aria-label="Quick view {{ product.title }}"
          >
            +
          </button>
        {% endif %}
      </div>

      {% unless forloop.last %}
        <!--@list/split-->
      {% endunless %}

    {% endfor %}
  {% endcapture %}

  {% liquid
    # Create an array from the list items to be used for different layout types
    assign list_items_array = list_items | strip | split: '<!--@list/split-->'
  %}

  <div
    class="
      resource-list
      {% if section.settings.layout_type == 'carousel' %}
        force-full-width
      {% endif %}
      {% if section.settings.carousel_on_mobile and section.settings.layout_type != 'carousel' %}
        hidden--mobile
      {% endif %}
      {{ classes }}
    "
    style="{{ styles }}"
    {% if section.settings.layout_type == 'grid' %}
      data-testid="resource-list-grid"
    {% endif %}
  >
    {% case section.settings.layout_type %}
      {% when 'grid' %}
        {{ list_items }}
      {% when 'carousel' %}
        {% render 'resource-list-carousel',
          ref: 'resourceListCarousel',
          slides: list_items_array,
          slide_count: max_items,
          settings: section.settings
        %}
      {% when 'editorial' %}
        {% render 'editorial-product-grid', items: list_items_array %}
    {% endcase %}
  </div>

  {% if section.settings.carousel_on_mobile and section.settings.layout_type != 'carousel' %}
    {% liquid
      assign mobile_carousel_gap = section.settings.columns_gap
    %}
    <div
      class="
        resource-list
        hidden--desktop
        force-full-width
      "
      style="
        --resource-list-column-gap-desktop: {{ mobile_carousel_gap }}px;
        --column-count: {{ section.settings.columns }};
        --mobile-card-size: {{ section.settings.mobile_card_size }};
      "
    >
      {% render 'resource-list-carousel',
        ref: 'resourceListCarouselMobile',
        slides: list_items_array,
        slide_count: max_items,
        settings: section.settings
      %}
    </div>
  {% endif %}

  <div
    class="section-resource-list__content"
    style="--horizontal-alignment: {{ section.settings.horizontal_alignment }};"
  >
    {%- content_for 'blocks' -%}
  </div>
</div>

{% comment %} Quick View Modal {% endcomment %}
<div id="quick-view-modal" class="quick-view-modal" style="display: none;">
  <div class="quick-view-overlay"></div>
  <div class="quick-view-content">
    <button class="quick-view-close">&times;</button>
    <div id="quick-view-product-content">
      <!-- Product content will be loaded here -->
    </div>
  </div>
</div>

{% stylesheet %}
  /* Quick View Button Styles */
  .resource-list__item {
    position: relative;
  }

  .product-quick-view-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: white;
    border: 1px solid #ddd;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    z-index: 5;
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .product-quick-view-btn:hover {
    background: #000;
    color: white;
    transform: scale(1.1);
  }

  /* Quick View Modal Styles */
  .quick-view-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .quick-view-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
  }

  .quick-view-content {
    position: relative;
    background: white;
    border-radius: 8px;
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    padding: 20px;
    margin: 20px;
  }

  .quick-view-close {
    position: absolute;
    top: 15px;
    right: 20px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
    z-index: 1;
  }

  .quick-view-close:hover {
    color: #000;
  }

  /* Product Form Styles */
  .quick-view-product {
    padding-top: 20px;
  }

  .quick-view-product-title {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 10px;
    color: #000;
  }

  .quick-view-product-price {
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 20px;
    color: #000;
  }

  .quick-view-product-image {
    width: 100%;
    max-width: 300px;
    height: auto;
    margin: 0 auto 20px;
    display: block;
    border-radius: 4px;
  }

  .quick-view-variant-selector {
    margin-bottom: 20px;
  }

  .quick-view-variant-label {
    display: block;
    font-weight: bold;
    margin-bottom: 8px;
    color: #333;
  }

  .quick-view-variant-options {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
  }

  .quick-view-variant-option {
    padding: 8px 16px;
    border: 1px solid #ddd;
    background: white;
    cursor: pointer;
    border-radius: 4px;
    transition: all 0.3s ease;
    font-size: 14px;
  }

  .quick-view-variant-option:hover,
  .quick-view-variant-option.selected {
    background: #000;
    color: white;
    border-color: #000;
  }

  .quick-view-size-selector select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    background: white;
  }

  .quick-view-add-to-cart {
    width: 100%;
    padding: 15px;
    background: #000;
    color: white;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: background 0.3s ease;
  }

  .quick-view-add-to-cart:hover {
    background: #333;
  }

  .quick-view-add-to-cart:disabled {
    background: #ccc;
    cursor: not-allowed;
  }

  /* Mobile responsiveness */
  @media screen and (max-width: 768px) {
    .quick-view-content {
      width: 95%;
      margin: 10px;
      max-height: 90vh;
    }

    .product-quick-view-btn {
      width: 25px;
      height: 25px;
      font-size: 16px;
      top: 5px;
      right: 5px;
    }
  }
{% endstylesheet %}

<script>
document.addEventListener('DOMContentLoaded', function() {
  const quickViewButtons = document.querySelectorAll('.product-quick-view-btn');
  const modal = document.getElementById('quick-view-modal');
  const overlay = modal.querySelector('.quick-view-overlay');
  const closeBtn = modal.querySelector('.quick-view-close');
  const content = document.getElementById('quick-view-product-content');

  // Extended size options
  const sizeOptions = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', '3XL', '4XL', '5XL', '6XL'];

  quickViewButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      
      const productId = this.getAttribute('data-product-id');
      const productHandle = this.getAttribute('data-product-handle');
      
      // Fetch product data
      fetch(`/products/${productHandle}.js`)
        .then(response => response.json())
        .then(product => {
          showQuickView(product);
        })
        .catch(error => {
          console.error('Error fetching product:', error);
        });
    });
  });

  function showQuickView(product) {
    // Build the quick view content
    const productHTML = `
      <div class="quick-view-product">
        <img src="${product.featured_image}" alt="${product.title}" class="quick-view-product-image">
        <h3 class="quick-view-product-title">${product.title}</h3>
        <div class="quick-view-product-price">${formatPrice(product.price)}</div>
        
        <form class="quick-view-form" action="/cart/add" method="post" enctype="multipart/form-data">
          <input type="hidden" name="id" value="${product.variants[0].id}">
          
          ${product.options.includes('Color') ? generateColorOptions(product) : ''}
          ${product.options.includes('Size') ? generateSizeOptions() : ''}
          
          <button type="submit" class="quick-view-add-to-cart">
            Add to Cart →
          </button>
        </form>
      </div>
    `;
    
    content.innerHTML = productHTML;
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
    
    // Add event listeners for variant selection
    setupVariantSelection(product);
  }

  function generateColorOptions(product) {
    const colors = product.variants.map(v => v.option1).filter((v, i, a) => a.indexOf(v) === i);
    
    return `
      <div class="quick-view-variant-selector">
        <label class="quick-view-variant-label">Color</label>
        <div class="quick-view-variant-options">
          ${colors.map(color => `
            <button type="button" class="quick-view-variant-option" data-option="color" data-value="${color}">
              ${color}
            </button>
          `).join('')}
        </div>
      </div>
    `;
  }

  function generateSizeOptions() {
    return `
      <div class="quick-view-variant-selector">
        <label class="quick-view-variant-label">Size</label>
        <div class="quick-view-size-selector">
          <select name="size" required>
            <option value="">Choose your size</option>
            ${sizeOptions.map(size => `
              <option value="${size}">${size}</option>
            `).join('')}
          </select>
        </div>
      </div>
    `;
  }

  function setupVariantSelection(product) {
    const form = content.querySelector('.quick-view-form');
    const variantOptions = content.querySelectorAll('.quick-view-variant-option');
    const sizeSelect = content.querySelector('select[name="size"]');
    const hiddenInput = content.querySelector('input[name="id"]');
    
    let selectedColor = '';
    let selectedSize = '';

    // Color selection
    variantOptions.forEach(option => {
      option.addEventListener('click', function() {
        // Remove selected class from siblings
        this.parentNode.querySelectorAll('.quick-view-variant-option').forEach(opt => {
          opt.classList.remove('selected');
        });
        
        // Add selected class to clicked option
        this.classList.add('selected');
        
        if (this.getAttribute('data-option') === 'color') {
          selectedColor = this.getAttribute('data-value');
        }
        
        updateVariant();
      });
    });

    // Size selection
    if (sizeSelect) {
      sizeSelect.addEventListener('change', function() {
        selectedSize = this.value;
        updateVariant();
      });
    }

    function updateVariant() {
      if (selectedColor && selectedSize) {
        const variant = product.variants.find(v => 
          v.option1 === selectedColor && v.option2 === selectedSize
        );
        
        if (variant) {
          hiddenInput.value = variant.id;
        }
      } else if (selectedColor && !product.options.includes('Size')) {
        const variant = product.variants.find(v => v.option1 === selectedColor);
        if (variant) {
          hiddenInput.value = variant.id;
        }
      } else if (selectedSize && !product.options.includes('Color')) {
        const variant = product.variants.find(v => v.option2 === selectedSize);
        if (variant) {
          hiddenInput.value = variant.id;
        }
      }
    }

    // Form submission
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(this);
      
      fetch('/cart/add.js', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        // Close modal and show success message
        closeModal();
        // You can add a success notification here
        alert('Product added to cart!');
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        alert('Error adding product to cart');
      });
    });
  }

  function formatPrice(price) {
    return (price / 100).toLocaleString('en-US', {
      style: 'currency',
      currency: 'USD'
    });
  }

  function closeModal() {
    modal.style.display = 'none';
    document.body.style.overflow = '';
  }

  // Close modal events
  closeBtn.addEventListener('click', closeModal);
  overlay.addEventListener('click', closeModal);
  
  // Close on escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modal.style.display === 'flex') {
      closeModal();
    }
  });
});
</script>

{% schema %}
{
  "name": "t:names.product_list",
  "class": "ui-test-product-list",
  "blocks": [
    {
      "type": "@theme"
    },
    {
      "type": "@app"
    },
    {
      "type": "_divider"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "t:settings.collection"
    },
    {
      "type": "select",
      "id": "layout_type",
      "label": "t:settings.layout_type",
      "options": [
        {
          "value": "grid",
          "label": "t:options.grid"
        },
        {
          "value": "carousel",
          "label": "t:options.carousel"
        },
        {
          "value": "editorial",
          "label": "t:options.editorial"
        }
      ],
      "default": "grid"
    },
    {
      "type": "checkbox",
      "id": "carousel_on_mobile",
      "label": "t:settings.carousel_on_mobile",
      "default": false,
      "visible_if": "{{ section.settings.layout_type != 'carousel' }}"
    },
    {
      "type": "range",
      "id": "max_products",
      "label": "t:settings.product_count",
      "min": 1,
      "max": 16,
      "step": 1,
      "default": 4
    },
    {
      "type": "range",
      "id": "columns",
      "label": "t:settings.columns",
      "min": 1,
      "max": 8,
      "step": 1,
      "default": 4,
      "visible_if": "{{ section.settings.layout_type != 'editorial' }}"
    },
    {
      "type": "select",
      "id": "mobile_columns",
      "label": "t:settings.mobile_columns",
      "options": [
        {
          "value": "1",
          "label": "t:options.one_number"
        },
        {
          "value": "2",
          "label": "t:options.two_number"
        }
      ],
      "default": "2",
      "visible_if": "{{ section.settings.layout_type == 'grid' and section.settings.carousel_on_mobile == false }}"
    },
    {
      "type": "select",
      "id": "mobile_card_size",
      "label": "t:settings.mobile_columns",
      "options": [
        {
          "value": "60cqw",
          "label": "t:options.one_number"
        },
        {
          "value": "44cqw",
          "label": "t:options.two_number"
        }
      ],
      "default": "60cqw",
      "visible_if": "{{ section.settings.layout_type == 'carousel' or section.settings.carousel_on_mobile == true }}"
    },
    {
      "type": "range",
      "id": "columns_gap",
      "label": "t:settings.horizontal_gap",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 8,
      "visible_if": "{{ section.settings.layout_type == 'grid' or section.settings.layout_type == 'carousel' }}"
    },
    {
      "type": "range",
      "id": "rows_gap",
      "label": "t:settings.vertical_gap",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 8,
      "visible_if": "{{ section.settings.layout_type == 'grid'}}"
    },
    {
      "type": "header",
      "content": "t:content.carousel_navigation",
      "visible_if": "{{ section.settings.layout_type == 'carousel' or section.settings.carousel_on_mobile == true }}"
    },
    {
      "type": "select",
      "id": "icons_style",
      "label": "t:settings.icon",
      "options": [
        {
          "value": "arrow",
          "label": "t:options.arrows"
        },
        {
          "value": "chevron",
          "label": "t:options.chevrons"
        },
        {
          "value": "arrows_large",
          "label": "t:options.arrows_large"
        },
        {
          "value": "chevron_large",
          "label": "t:options.chevron_large"
        },
        {
          "value": "none",
          "label": "t:options.none"
        }
      ],
      "default": "arrow",
      "visible_if": "{{ section.settings.layout_type == 'carousel' or section.settings.carousel_on_mobile == true }}"
    },
    {
      "type": "select",
      "id": "icons_shape",
      "label": "t:settings.icon_background",
      "options": [
        {
          "value": "none",
          "label": "t:options.none"
        },
        {
          "value": "circle",
          "label": "t:options.circle"
        },
        {
          "value": "square",
          "label": "t:options.square"
        }
      ],
      "default": "none",
      "visible_if": "{{ section.settings.icons_style != 'none' and section.settings.layout_type == 'carousel' or section.settings.carousel_on_mobile == true }}"
    },
    {
      "type": "header",
      "content": "t:content.section_layout"
    },
    {
      "type": "select",
      "id": "section_width",
      "label": "t:settings.width",
      "options": [
        {
          "value": "page-width",
          "label": "t:options.page"
        },
        {
          "value": "full-width",
          "label": "t:options.full"
        }
      ],
      "default": "page-width"
    },
    {
      "type": "select",
      "id": "horizontal_alignment",
      "label": "t:settings.alignment",
      "options": [
        {
          "value": "flex-start",
          "label": "t:options.left"
        },
        {
          "value": "center",
          "label": "t:options.center"
        },
        {
          "value": "flex-end",
          "label": "t:options.right"
        }
      ],
      "default": "flex-start"
    },
    {
      "type": "range",
      "id": "gap",
      "label": "t:settings.gap",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:settings.color_scheme",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:content.padding"
    },
    {
      "type": "range",
      "id": "padding-block-start",
      "label": "t:settings.top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding-block-end",
      "label": "t:settings.bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "t:names.products_grid",
      "category": "t:categories.products",
      "settings": {
        "collection": "",
        "max_products": 8,
        "layout_type": "grid",
        "carousel_on_mobile": false,
        "columns": 4,
        "mobile_columns": "2",
        "columns_gap": 8,
        "rows_gap": 24,
        "icons_style": "arrow",
        "icons_shape": "none",
        "section_width": "page-width",
        "gap": 28,
        "color_scheme": "scheme-1",
        "padding-block-start": 48,
        "padding-block-end": 48
      }
    }
  ]
}
{% endschema %}